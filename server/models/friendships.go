// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Friendship is an object representing the database table.
type Friendship struct {
	ID                  int64                    `boil:"id" json:"id" toml:"id" yaml:"id"`
	RequesterID         int64                    `boil:"requester_id" json:"requester_id" toml:"requester_id" yaml:"requester_id"`
	UserID              int64                    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	WorkflowState       FriendshipsWorkflowState `boil:"workflow_state" json:"workflow_state" toml:"workflow_state" yaml:"workflow_state"`
	WorkflowCompletedBy int64                    `boil:"workflow_completed_by" json:"workflow_completed_by" toml:"workflow_completed_by" yaml:"workflow_completed_by"`
	CreatedAt           time.Time                `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time                `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time                `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *friendshipR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L friendshipL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FriendshipColumns = struct {
	ID                  string
	RequesterID         string
	UserID              string
	WorkflowState       string
	WorkflowCompletedBy string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "id",
	RequesterID:         "requester_id",
	UserID:              "user_id",
	WorkflowState:       "workflow_state",
	WorkflowCompletedBy: "workflow_completed_by",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var FriendshipTableColumns = struct {
	ID                  string
	RequesterID         string
	UserID              string
	WorkflowState       string
	WorkflowCompletedBy string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "friendships.id",
	RequesterID:         "friendships.requester_id",
	UserID:              "friendships.user_id",
	WorkflowState:       "friendships.workflow_state",
	WorkflowCompletedBy: "friendships.workflow_completed_by",
	CreatedAt:           "friendships.created_at",
	UpdatedAt:           "friendships.updated_at",
	DeletedAt:           "friendships.deleted_at",
}

// Generated where

type whereHelperFriendshipsWorkflowState struct{ field string }

func (w whereHelperFriendshipsWorkflowState) EQ(x FriendshipsWorkflowState) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperFriendshipsWorkflowState) NEQ(x FriendshipsWorkflowState) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperFriendshipsWorkflowState) LT(x FriendshipsWorkflowState) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperFriendshipsWorkflowState) LTE(x FriendshipsWorkflowState) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperFriendshipsWorkflowState) GT(x FriendshipsWorkflowState) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperFriendshipsWorkflowState) GTE(x FriendshipsWorkflowState) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperFriendshipsWorkflowState) IN(slice []FriendshipsWorkflowState) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperFriendshipsWorkflowState) NIN(slice []FriendshipsWorkflowState) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var FriendshipWhere = struct {
	ID                  whereHelperint64
	RequesterID         whereHelperint64
	UserID              whereHelperint64
	WorkflowState       whereHelperFriendshipsWorkflowState
	WorkflowCompletedBy whereHelperint64
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
}{
	ID:                  whereHelperint64{field: "\"friendships\".\"id\""},
	RequesterID:         whereHelperint64{field: "\"friendships\".\"requester_id\""},
	UserID:              whereHelperint64{field: "\"friendships\".\"user_id\""},
	WorkflowState:       whereHelperFriendshipsWorkflowState{field: "\"friendships\".\"workflow_state\""},
	WorkflowCompletedBy: whereHelperint64{field: "\"friendships\".\"workflow_completed_by\""},
	CreatedAt:           whereHelpertime_Time{field: "\"friendships\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"friendships\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"friendships\".\"deleted_at\""},
}

// FriendshipRels is where relationship names are stored.
var FriendshipRels = struct {
	Requester               string
	User                    string
	WorkflowCompletedByUser string
}{
	Requester:               "Requester",
	User:                    "User",
	WorkflowCompletedByUser: "WorkflowCompletedByUser",
}

// friendshipR is where relationships are stored.
type friendshipR struct {
	Requester               *User `boil:"Requester" json:"Requester" toml:"Requester" yaml:"Requester"`
	User                    *User `boil:"User" json:"User" toml:"User" yaml:"User"`
	WorkflowCompletedByUser *User `boil:"WorkflowCompletedByUser" json:"WorkflowCompletedByUser" toml:"WorkflowCompletedByUser" yaml:"WorkflowCompletedByUser"`
}

// NewStruct creates a new relationship struct
func (*friendshipR) NewStruct() *friendshipR {
	return &friendshipR{}
}

func (r *friendshipR) GetRequester() *User {
	if r == nil {
		return nil
	}
	return r.Requester
}

func (r *friendshipR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *friendshipR) GetWorkflowCompletedByUser() *User {
	if r == nil {
		return nil
	}
	return r.WorkflowCompletedByUser
}

// friendshipL is where Load methods for each relationship are stored.
type friendshipL struct{}

var (
	friendshipAllColumns            = []string{"id", "requester_id", "user_id", "workflow_state", "workflow_completed_by", "created_at", "updated_at", "deleted_at"}
	friendshipColumnsWithoutDefault = []string{"id", "requester_id", "user_id", "workflow_state", "workflow_completed_by"}
	friendshipColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	friendshipPrimaryKeyColumns     = []string{"id"}
	friendshipGeneratedColumns      = []string{}
)

type (
	// FriendshipSlice is an alias for a slice of pointers to Friendship.
	// This should almost always be used instead of []Friendship.
	FriendshipSlice []*Friendship
	// FriendshipHook is the signature for custom Friendship hook methods
	FriendshipHook func(context.Context, boil.ContextExecutor, *Friendship) error

	friendshipQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	friendshipType                 = reflect.TypeOf(&Friendship{})
	friendshipMapping              = queries.MakeStructMapping(friendshipType)
	friendshipPrimaryKeyMapping, _ = queries.BindMapping(friendshipType, friendshipMapping, friendshipPrimaryKeyColumns)
	friendshipInsertCacheMut       sync.RWMutex
	friendshipInsertCache          = make(map[string]insertCache)
	friendshipUpdateCacheMut       sync.RWMutex
	friendshipUpdateCache          = make(map[string]updateCache)
	friendshipUpsertCacheMut       sync.RWMutex
	friendshipUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var friendshipAfterSelectMu sync.Mutex
var friendshipAfterSelectHooks []FriendshipHook

var friendshipBeforeInsertMu sync.Mutex
var friendshipBeforeInsertHooks []FriendshipHook
var friendshipAfterInsertMu sync.Mutex
var friendshipAfterInsertHooks []FriendshipHook

var friendshipBeforeUpdateMu sync.Mutex
var friendshipBeforeUpdateHooks []FriendshipHook
var friendshipAfterUpdateMu sync.Mutex
var friendshipAfterUpdateHooks []FriendshipHook

var friendshipBeforeDeleteMu sync.Mutex
var friendshipBeforeDeleteHooks []FriendshipHook
var friendshipAfterDeleteMu sync.Mutex
var friendshipAfterDeleteHooks []FriendshipHook

var friendshipBeforeUpsertMu sync.Mutex
var friendshipBeforeUpsertHooks []FriendshipHook
var friendshipAfterUpsertMu sync.Mutex
var friendshipAfterUpsertHooks []FriendshipHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Friendship) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Friendship) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Friendship) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Friendship) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Friendship) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Friendship) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Friendship) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Friendship) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Friendship) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range friendshipAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFriendshipHook registers your hook function for all future operations.
func AddFriendshipHook(hookPoint boil.HookPoint, friendshipHook FriendshipHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		friendshipAfterSelectMu.Lock()
		friendshipAfterSelectHooks = append(friendshipAfterSelectHooks, friendshipHook)
		friendshipAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		friendshipBeforeInsertMu.Lock()
		friendshipBeforeInsertHooks = append(friendshipBeforeInsertHooks, friendshipHook)
		friendshipBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		friendshipAfterInsertMu.Lock()
		friendshipAfterInsertHooks = append(friendshipAfterInsertHooks, friendshipHook)
		friendshipAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		friendshipBeforeUpdateMu.Lock()
		friendshipBeforeUpdateHooks = append(friendshipBeforeUpdateHooks, friendshipHook)
		friendshipBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		friendshipAfterUpdateMu.Lock()
		friendshipAfterUpdateHooks = append(friendshipAfterUpdateHooks, friendshipHook)
		friendshipAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		friendshipBeforeDeleteMu.Lock()
		friendshipBeforeDeleteHooks = append(friendshipBeforeDeleteHooks, friendshipHook)
		friendshipBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		friendshipAfterDeleteMu.Lock()
		friendshipAfterDeleteHooks = append(friendshipAfterDeleteHooks, friendshipHook)
		friendshipAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		friendshipBeforeUpsertMu.Lock()
		friendshipBeforeUpsertHooks = append(friendshipBeforeUpsertHooks, friendshipHook)
		friendshipBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		friendshipAfterUpsertMu.Lock()
		friendshipAfterUpsertHooks = append(friendshipAfterUpsertHooks, friendshipHook)
		friendshipAfterUpsertMu.Unlock()
	}
}

// One returns a single friendship record from the query.
func (q friendshipQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Friendship, error) {
	o := &Friendship{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for friendships")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Friendship records from the query.
func (q friendshipQuery) All(ctx context.Context, exec boil.ContextExecutor) (FriendshipSlice, error) {
	var o []*Friendship

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Friendship slice")
	}

	if len(friendshipAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Friendship records in the query.
func (q friendshipQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count friendships rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q friendshipQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if friendships exists")
	}

	return count > 0, nil
}

// Requester pointed to by the foreign key.
func (o *Friendship) Requester(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RequesterID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// User pointed to by the foreign key.
func (o *Friendship) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// WorkflowCompletedByUser pointed to by the foreign key.
func (o *Friendship) WorkflowCompletedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WorkflowCompletedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadRequester allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendshipL) LoadRequester(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriendship interface{}, mods queries.Applicator) error {
	var slice []*Friendship
	var object *Friendship

	if singular {
		var ok bool
		object, ok = maybeFriendship.(*Friendship)
		if !ok {
			object = new(Friendship)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriendship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriendship))
			}
		}
	} else {
		s, ok := maybeFriendship.(*[]*Friendship)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriendship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriendship))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendshipR{}
		}
		args[object.RequesterID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendshipR{}
			}

			args[obj.RequesterID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Requester = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RequesterFriendships = append(foreign.R.RequesterFriendships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RequesterID == foreign.ID {
				local.R.Requester = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RequesterFriendships = append(foreign.R.RequesterFriendships, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendshipL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriendship interface{}, mods queries.Applicator) error {
	var slice []*Friendship
	var object *Friendship

	if singular {
		var ok bool
		object, ok = maybeFriendship.(*Friendship)
		if !ok {
			object = new(Friendship)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriendship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriendship))
			}
		}
	} else {
		s, ok := maybeFriendship.(*[]*Friendship)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriendship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriendship))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendshipR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendshipR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Friendships = append(foreign.R.Friendships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Friendships = append(foreign.R.Friendships, local)
				break
			}
		}
	}

	return nil
}

// LoadWorkflowCompletedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (friendshipL) LoadWorkflowCompletedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFriendship interface{}, mods queries.Applicator) error {
	var slice []*Friendship
	var object *Friendship

	if singular {
		var ok bool
		object, ok = maybeFriendship.(*Friendship)
		if !ok {
			object = new(Friendship)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFriendship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFriendship))
			}
		}
	} else {
		s, ok := maybeFriendship.(*[]*Friendship)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFriendship)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFriendship))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &friendshipR{}
		}
		args[object.WorkflowCompletedBy] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &friendshipR{}
			}

			args[obj.WorkflowCompletedBy] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WorkflowCompletedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.WorkflowCompletedByFriendships = append(foreign.R.WorkflowCompletedByFriendships, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkflowCompletedBy == foreign.ID {
				local.R.WorkflowCompletedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.WorkflowCompletedByFriendships = append(foreign.R.WorkflowCompletedByFriendships, local)
				break
			}
		}
	}

	return nil
}

// SetRequester of the friendship to the related item.
// Sets o.R.Requester to related.
// Adds o to related.R.RequesterFriendships.
func (o *Friendship) SetRequester(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"friendships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"requester_id"}),
		strmangle.WhereClause("\"", "\"", 2, friendshipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RequesterID = related.ID
	if o.R == nil {
		o.R = &friendshipR{
			Requester: related,
		}
	} else {
		o.R.Requester = related
	}

	if related.R == nil {
		related.R = &userR{
			RequesterFriendships: FriendshipSlice{o},
		}
	} else {
		related.R.RequesterFriendships = append(related.R.RequesterFriendships, o)
	}

	return nil
}

// SetUser of the friendship to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Friendships.
func (o *Friendship) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"friendships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, friendshipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &friendshipR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Friendships: FriendshipSlice{o},
		}
	} else {
		related.R.Friendships = append(related.R.Friendships, o)
	}

	return nil
}

// SetWorkflowCompletedByUser of the friendship to the related item.
// Sets o.R.WorkflowCompletedByUser to related.
// Adds o to related.R.WorkflowCompletedByFriendships.
func (o *Friendship) SetWorkflowCompletedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"friendships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"workflow_completed_by"}),
		strmangle.WhereClause("\"", "\"", 2, friendshipPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkflowCompletedBy = related.ID
	if o.R == nil {
		o.R = &friendshipR{
			WorkflowCompletedByUser: related,
		}
	} else {
		o.R.WorkflowCompletedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			WorkflowCompletedByFriendships: FriendshipSlice{o},
		}
	} else {
		related.R.WorkflowCompletedByFriendships = append(related.R.WorkflowCompletedByFriendships, o)
	}

	return nil
}

// Friendships retrieves all the records using an executor.
func Friendships(mods ...qm.QueryMod) friendshipQuery {
	mods = append(mods, qm.From("\"friendships\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"friendships\".*"})
	}

	return friendshipQuery{q}
}

// FindFriendship retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFriendship(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Friendship, error) {
	friendshipObj := &Friendship{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"friendships\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, friendshipObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from friendships")
	}

	if err = friendshipObj.doAfterSelectHooks(ctx, exec); err != nil {
		return friendshipObj, err
	}

	return friendshipObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Friendship) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no friendships provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendshipColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	friendshipInsertCacheMut.RLock()
	cache, cached := friendshipInsertCache[key]
	friendshipInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			friendshipAllColumns,
			friendshipColumnsWithDefault,
			friendshipColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(friendshipType, friendshipMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(friendshipType, friendshipMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"friendships\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"friendships\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into friendships")
	}

	if !cached {
		friendshipInsertCacheMut.Lock()
		friendshipInsertCache[key] = cache
		friendshipInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Friendship.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Friendship) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	friendshipUpdateCacheMut.RLock()
	cache, cached := friendshipUpdateCache[key]
	friendshipUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			friendshipAllColumns,
			friendshipPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update friendships, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"friendships\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, friendshipPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(friendshipType, friendshipMapping, append(wl, friendshipPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update friendships row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for friendships")
	}

	if !cached {
		friendshipUpdateCacheMut.Lock()
		friendshipUpdateCache[key] = cache
		friendshipUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q friendshipQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for friendships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for friendships")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FriendshipSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"friendships\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, friendshipPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in friendship slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all friendship")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Friendship) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no friendships provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(friendshipColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	friendshipUpsertCacheMut.RLock()
	cache, cached := friendshipUpsertCache[key]
	friendshipUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			friendshipAllColumns,
			friendshipColumnsWithDefault,
			friendshipColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			friendshipAllColumns,
			friendshipPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert friendships, could not build update column list")
		}

		ret := strmangle.SetComplement(friendshipAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(friendshipPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert friendships, could not build conflict column list")
			}

			conflict = make([]string, len(friendshipPrimaryKeyColumns))
			copy(conflict, friendshipPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"friendships\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(friendshipType, friendshipMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(friendshipType, friendshipMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert friendships")
	}

	if !cached {
		friendshipUpsertCacheMut.Lock()
		friendshipUpsertCache[key] = cache
		friendshipUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Friendship record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Friendship) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Friendship provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), friendshipPrimaryKeyMapping)
	sql := "DELETE FROM \"friendships\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from friendships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for friendships")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q friendshipQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no friendshipQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from friendships")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for friendships")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FriendshipSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(friendshipBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"friendships\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, friendshipPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from friendship slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for friendships")
	}

	if len(friendshipAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Friendship) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFriendship(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FriendshipSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FriendshipSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), friendshipPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"friendships\".* FROM \"friendships\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, friendshipPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FriendshipSlice")
	}

	*o = slice

	return nil
}

// FriendshipExists checks if the Friendship row exists.
func FriendshipExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"friendships\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if friendships exists")
	}

	return exists, nil
}

// Exists checks if the Friendship row exists.
func (o *Friendship) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FriendshipExists(ctx, exec, o.ID)
}
