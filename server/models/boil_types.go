// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type ChatroomsWorkflowState string

// Enum values for ChatroomsWorkflowState
const (
	ChatroomsWorkflowStateActive  ChatroomsWorkflowState = "active"
	ChatroomsWorkflowStateDeleted ChatroomsWorkflowState = "deleted"
)

func AllChatroomsWorkflowState() []ChatroomsWorkflowState {
	return []ChatroomsWorkflowState{
		ChatroomsWorkflowStateActive,
		ChatroomsWorkflowStateDeleted,
	}
}

func (e ChatroomsWorkflowState) IsValid() error {
	switch e {
	case ChatroomsWorkflowStateActive, ChatroomsWorkflowStateDeleted:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ChatroomsWorkflowState) String() string {
	return string(e)
}

func (e ChatroomsWorkflowState) Ordinal() int {
	switch e {
	case ChatroomsWorkflowStateActive:
		return 0
	case ChatroomsWorkflowStateDeleted:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ChatroomsType string

// Enum values for ChatroomsType
const (
	ChatroomsTypePrivate ChatroomsType = "private"
	ChatroomsTypePublic  ChatroomsType = "public"
)

func AllChatroomsType() []ChatroomsType {
	return []ChatroomsType{
		ChatroomsTypePrivate,
		ChatroomsTypePublic,
	}
}

func (e ChatroomsType) IsValid() error {
	switch e {
	case ChatroomsTypePrivate, ChatroomsTypePublic:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ChatroomsType) String() string {
	return string(e)
}

func (e ChatroomsType) Ordinal() int {
	switch e {
	case ChatroomsTypePrivate:
		return 0
	case ChatroomsTypePublic:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type FriendshipsWorkflowState string

// Enum values for FriendshipsWorkflowState
const (
	FriendshipsWorkflowStatePending   FriendshipsWorkflowState = "pending"
	FriendshipsWorkflowStateActive    FriendshipsWorkflowState = "active"
	FriendshipsWorkflowStateRejected  FriendshipsWorkflowState = "rejected"
	FriendshipsWorkflowStateCancelled FriendshipsWorkflowState = "cancelled"
)

func AllFriendshipsWorkflowState() []FriendshipsWorkflowState {
	return []FriendshipsWorkflowState{
		FriendshipsWorkflowStatePending,
		FriendshipsWorkflowStateActive,
		FriendshipsWorkflowStateRejected,
		FriendshipsWorkflowStateCancelled,
	}
}

func (e FriendshipsWorkflowState) IsValid() error {
	switch e {
	case FriendshipsWorkflowStatePending, FriendshipsWorkflowStateActive, FriendshipsWorkflowStateRejected, FriendshipsWorkflowStateCancelled:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e FriendshipsWorkflowState) String() string {
	return string(e)
}

func (e FriendshipsWorkflowState) Ordinal() int {
	switch e {
	case FriendshipsWorkflowStatePending:
		return 0
	case FriendshipsWorkflowStateActive:
		return 1
	case FriendshipsWorkflowStateRejected:
		return 2
	case FriendshipsWorkflowStateCancelled:
		return 3

	default:
		panic(errors.New("enum is not valid"))
	}
}

type UsersWorkflowState string

// Enum values for UsersWorkflowState
const (
	UsersWorkflowStateActive    UsersWorkflowState = "active"
	UsersWorkflowStateSuspended UsersWorkflowState = "suspended"
	UsersWorkflowStateDeleted   UsersWorkflowState = "deleted"
)

func AllUsersWorkflowState() []UsersWorkflowState {
	return []UsersWorkflowState{
		UsersWorkflowStateActive,
		UsersWorkflowStateSuspended,
		UsersWorkflowStateDeleted,
	}
}

func (e UsersWorkflowState) IsValid() error {
	switch e {
	case UsersWorkflowStateActive, UsersWorkflowStateSuspended, UsersWorkflowStateDeleted:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UsersWorkflowState) String() string {
	return string(e)
}

func (e UsersWorkflowState) Ordinal() int {
	switch e {
	case UsersWorkflowStateActive:
		return 0
	case UsersWorkflowStateSuspended:
		return 1
	case UsersWorkflowStateDeleted:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}
